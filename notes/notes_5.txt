Mutables vs immutables:
----------------------
Mutables are objects that can be changed after creation. Examples, list, set, and dict
Immutables are objects that cannot be changed after creating and attempt to modify them
may result in creating a new object. Examples, tuples, frozensets, str, int, ...

Iterators:
---------
One way to obtain an iterator from an iterable is to apply the function "iter" on the iterable
Example
>>> x = [1, 2, 3]
>>> y = iter(x)

If y is an iteraot, it must have the atttibute "__next__"
>>> hasattr(y, "__next__")
True

Is y also an iterable? Let's check if it has the attribute "__iter__"
>>> hasattr(x, "__iter__"). Yes.
True

Is y indexable? No.
>>> hasattr(y, "__getitem__")
False

Is y exahusible? Yes.
>>> list(y)
[1, 2, 3]
>>> list(y)
[]
>>>

Since y is iterable, you can iterate through it's elements by either placing the object x in a for statement or
by using the next() function.
>>> y = iter(x)
>>> next(y)
1
>>> next(y)
2
>>> next(y)
3
>>> next(y)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
StopIteration
>>>

Note that when you consume all values in y and try to run "next(y)", a StopIteration will be raised.

--------------
Cannot be done for iterators
- list(iterator) and len(iterator) == 0 
iterators might generate numbers indefintely, e.g., count() in itertools.

- if iterator or if (iterator == []) 
e.g.,
>>> x = []
>>> y = iter(x)
>>> y
<list_iterator object at 0x000001A70B1CAEF0>
>>> if y :
...    print("Full List")
... else :
...    print("Empty List")
...
Full List
>>>

Indexables:
---------
If an iterable is indexable, you can access it's elements via an index and that the elements are finite.
If an iterable is not indexable, then it might be infinit and you cannot access it's elements via an index. 
For example, if x is not idexable, to iterate throught it's elements, you may either do "for i in x:" or
p = iter(x); val = next(p); ...
-------------
Operators.py
------------
Boolean operators are typically used on boolean values. Examples, and, or, not.
Bitwise operators are typically used on integral values (used to compare integersin their binary format). 
Examples, ~, |, &, >>, <<

Operator precedence:
https://www.programiz.com/python-programming/precedence-associativity

Example,
i = 8
j = not i & (i - 1)
assert j is True #power of 2
i & (i - 1) will be conducted first since & has higher precedence that not.
i.e., 1000 & 0111, and the result will be false

j = not False

j = True


